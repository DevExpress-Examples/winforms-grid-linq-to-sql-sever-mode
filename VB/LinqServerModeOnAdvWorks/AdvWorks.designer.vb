'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3082
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Data
Imports System.Collections.Generic
Imports System.Reflection
Imports System.Linq
Imports System.Linq.Expressions
Imports System.ComponentModel
Imports System

Namespace LinqServerModeOnAdvWorks

    <System.Data.Linq.Mapping.DatabaseAttribute(Name:="AdventureWorks")>
    Public Partial Class AdvWorksDataContext
        Inherits System.Data.Linq.DataContext

        Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New System.Data.Linq.Mapping.AttributeMappingSource()

'#Region "Extensibility Method Definitions"
        Partial Private Sub OnCreated()
        End Sub

        Partial Private Sub InsertPurchaseOrderHeader(ByVal instance As LinqServerModeOnAdvWorks.PurchaseOrderHeader)
        End Sub

        Partial Private Sub UpdatePurchaseOrderHeader(ByVal instance As LinqServerModeOnAdvWorks.PurchaseOrderHeader)
        End Sub

        Partial Private Sub DeletePurchaseOrderHeader(ByVal instance As LinqServerModeOnAdvWorks.PurchaseOrderHeader)
        End Sub

        Partial Private Sub InsertPurchaseOrderDetail(ByVal instance As LinqServerModeOnAdvWorks.PurchaseOrderDetail)
        End Sub

        Partial Private Sub UpdatePurchaseOrderDetail(ByVal instance As LinqServerModeOnAdvWorks.PurchaseOrderDetail)
        End Sub

        Partial Private Sub DeletePurchaseOrderDetail(ByVal instance As LinqServerModeOnAdvWorks.PurchaseOrderDetail)
        End Sub

        Partial Private Sub InsertProduct(ByVal instance As LinqServerModeOnAdvWorks.Product)
        End Sub

        Partial Private Sub UpdateProduct(ByVal instance As LinqServerModeOnAdvWorks.Product)
        End Sub

        Partial Private Sub DeleteProduct(ByVal instance As LinqServerModeOnAdvWorks.Product)
        End Sub

        Partial Private Sub InsertEmployee(ByVal instance As LinqServerModeOnAdvWorks.Employee)
        End Sub

        Partial Private Sub UpdateEmployee(ByVal instance As LinqServerModeOnAdvWorks.Employee)
        End Sub

        Partial Private Sub DeleteEmployee(ByVal instance As LinqServerModeOnAdvWorks.Employee)
        End Sub

        Partial Private Sub InsertContact(ByVal instance As LinqServerModeOnAdvWorks.Contact)
        End Sub

        Partial Private Sub UpdateContact(ByVal instance As LinqServerModeOnAdvWorks.Contact)
        End Sub

        Partial Private Sub DeleteContact(ByVal instance As LinqServerModeOnAdvWorks.Contact)
        End Sub

'#End Region
        Public Sub New()
            MyBase.New(Global.LinqServerModeOnAdvWorks.Properties.Settings.[Default].AdventureWorksConnectionString, LinqServerModeOnAdvWorks.AdvWorksDataContext.mappingSource)
            Me.OnCreated()
        End Sub

        Public Sub New(ByVal connection As String)
            MyBase.New(connection, LinqServerModeOnAdvWorks.AdvWorksDataContext.mappingSource)
            Me.OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection)
            MyBase.New(connection, LinqServerModeOnAdvWorks.AdvWorksDataContext.mappingSource)
            Me.OnCreated()
        End Sub

        Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            Me.OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            Me.OnCreated()
        End Sub

        Public ReadOnly Property PurchaseOrderHeaders As System.Data.Linq.Table(Of LinqServerModeOnAdvWorks.PurchaseOrderHeader)
            Get
                Return Me.GetTable(Of LinqServerModeOnAdvWorks.PurchaseOrderHeader)()
            End Get
        End Property

        Public ReadOnly Property PurchaseOrderDetails As System.Data.Linq.Table(Of LinqServerModeOnAdvWorks.PurchaseOrderDetail)
            Get
                Return Me.GetTable(Of LinqServerModeOnAdvWorks.PurchaseOrderDetail)()
            End Get
        End Property

        Public ReadOnly Property Products As System.Data.Linq.Table(Of LinqServerModeOnAdvWorks.Product)
            Get
                Return Me.GetTable(Of LinqServerModeOnAdvWorks.Product)()
            End Get
        End Property

        Public ReadOnly Property Employees As System.Data.Linq.Table(Of LinqServerModeOnAdvWorks.Employee)
            Get
                Return Me.GetTable(Of LinqServerModeOnAdvWorks.Employee)()
            End Get
        End Property

        Public ReadOnly Property Contacts As System.Data.Linq.Table(Of LinqServerModeOnAdvWorks.Contact)
            Get
                Return Me.GetTable(Of LinqServerModeOnAdvWorks.Contact)()
            End Get
        End Property
    End Class

    <System.Data.Linq.Mapping.TableAttribute(Name:="Purchasing.PurchaseOrderHeader")>
    Public Partial Class PurchaseOrderHeader
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As System.ComponentModel.PropertyChangingEventArgs = New System.ComponentModel.PropertyChangingEventArgs(System.[String].Empty)

        Private _PurchaseOrderID As Integer

        Private _RevisionNumber As Byte

        Private _Status As Byte

        Private _EmployeeID As Integer

        Private _VendorID As Integer

        Private _ShipMethodID As Integer

        Private _OrderDate As System.DateTime

        Private _ShipDate As System.Nullable(Of System.DateTime)

        Private _SubTotal As Decimal

        Private _TaxAmt As Decimal

        Private _Freight As Decimal

        Private _TotalDue As Decimal

        Private _ModifiedDate As System.DateTime

        Private _PurchaseOrderDetails As System.Data.Linq.EntitySet(Of LinqServerModeOnAdvWorks.PurchaseOrderDetail)

        Private _Employee As System.Data.Linq.EntityRef(Of LinqServerModeOnAdvWorks.Employee)

'#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub

        Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
        End Sub

        Partial Private Sub OnCreated()
        End Sub

        Partial Private Sub OnPurchaseOrderIDChanging(ByVal value As Integer)
        End Sub

        Partial Private Sub OnPurchaseOrderIDChanged()
        End Sub

        Partial Private Sub OnRevisionNumberChanging(ByVal value As Byte)
        End Sub

        Partial Private Sub OnRevisionNumberChanged()
        End Sub

        Partial Private Sub OnStatusChanging(ByVal value As Byte)
        End Sub

        Partial Private Sub OnStatusChanged()
        End Sub

        Partial Private Sub OnEmployeeIDChanging(ByVal value As Integer)
        End Sub

        Partial Private Sub OnEmployeeIDChanged()
        End Sub

        Partial Private Sub OnVendorIDChanging(ByVal value As Integer)
        End Sub

        Partial Private Sub OnVendorIDChanged()
        End Sub

        Partial Private Sub OnShipMethodIDChanging(ByVal value As Integer)
        End Sub

        Partial Private Sub OnShipMethodIDChanged()
        End Sub

        Partial Private Sub OnOrderDateChanging(ByVal value As System.DateTime)
        End Sub

        Partial Private Sub OnOrderDateChanged()
        End Sub

        Partial Private Sub OnShipDateChanging(ByVal value As System.Nullable(Of System.DateTime))
        End Sub

        Partial Private Sub OnShipDateChanged()
        End Sub

        Partial Private Sub OnSubTotalChanging(ByVal value As Decimal)
        End Sub

        Partial Private Sub OnSubTotalChanged()
        End Sub

        Partial Private Sub OnTaxAmtChanging(ByVal value As Decimal)
        End Sub

        Partial Private Sub OnTaxAmtChanged()
        End Sub

        Partial Private Sub OnFreightChanging(ByVal value As Decimal)
        End Sub

        Partial Private Sub OnFreightChanged()
        End Sub

        Partial Private Sub OnTotalDueChanging(ByVal value As Decimal)
        End Sub

        Partial Private Sub OnTotalDueChanged()
        End Sub

        Partial Private Sub OnModifiedDateChanging(ByVal value As System.DateTime)
        End Sub

        Partial Private Sub OnModifiedDateChanged()
        End Sub

'#End Region
        Public Sub New()
            Me._PurchaseOrderDetails = New System.Data.Linq.EntitySet(Of LinqServerModeOnAdvWorks.PurchaseOrderDetail)(New System.Action(Of LinqServerModeOnAdvWorks.PurchaseOrderDetail)(AddressOf Me.attach_PurchaseOrderDetails), New System.Action(Of LinqServerModeOnAdvWorks.PurchaseOrderDetail)(AddressOf Me.detach_PurchaseOrderDetails))
            Me._Employee = DirectCast(Nothing, Global.System.Data.Linq.EntityRef(Of Global.LinqServerModeOnAdvWorks.Employee))
            Me.OnCreated()
        End Sub

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchaseOrderID", AutoSync:=System.Data.Linq.Mapping.AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property PurchaseOrderID As Integer
            Get
                Return Me._PurchaseOrderID
            End Get

            Set(ByVal value As Integer)
                If(Me._PurchaseOrderID <> value) Then
                    Me.OnPurchaseOrderIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._PurchaseOrderID = value
                    Me.SendPropertyChanged("PurchaseOrderID")
                    Me.OnPurchaseOrderIDChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RevisionNumber", DbType:="TinyInt NOT NULL")>
        Public Property RevisionNumber As Byte
            Get
                Return Me._RevisionNumber
            End Get

            Set(ByVal value As Byte)
                If(Me._RevisionNumber <> value) Then
                    Me.OnRevisionNumberChanging(value)
                    Me.SendPropertyChanging()
                    Me._RevisionNumber = value
                    Me.SendPropertyChanged("RevisionNumber")
                    Me.OnRevisionNumberChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="TinyInt NOT NULL")>
        Public Property Status As Byte
            Get
                Return Me._Status
            End Get

            Set(ByVal value As Byte)
                If(Me._Status <> value) Then
                    Me.OnStatusChanging(value)
                    Me.SendPropertyChanging()
                    Me._Status = value
                    Me.SendPropertyChanged("Status")
                    Me.OnStatusChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeID", DbType:="Int NOT NULL")>
        Public Property EmployeeID As Integer
            Get
                Return Me._EmployeeID
            End Get

            Set(ByVal value As Integer)
                If(Me._EmployeeID <> value) Then
                    If Me._Employee.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If

                    Me.OnEmployeeIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._EmployeeID = value
                    Me.SendPropertyChanged("EmployeeID")
                    Me.OnEmployeeIDChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VendorID", DbType:="Int NOT NULL")>
        Public Property VendorID As Integer
            Get
                Return Me._VendorID
            End Get

            Set(ByVal value As Integer)
                If(Me._VendorID <> value) Then
                    Me.OnVendorIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._VendorID = value
                    Me.SendPropertyChanged("VendorID")
                    Me.OnVendorIDChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipMethodID", DbType:="Int NOT NULL")>
        Public Property ShipMethodID As Integer
            Get
                Return Me._ShipMethodID
            End Get

            Set(ByVal value As Integer)
                If(Me._ShipMethodID <> value) Then
                    Me.OnShipMethodIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ShipMethodID = value
                    Me.SendPropertyChanged("ShipMethodID")
                    Me.OnShipMethodIDChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderDate", DbType:="DateTime NOT NULL")>
        Public Property OrderDate As System.DateTime
            Get
                Return Me._OrderDate
            End Get

            Set(ByVal value As System.DateTime)
                If(Me._OrderDate <> value) Then
                    Me.OnOrderDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._OrderDate = value
                    Me.SendPropertyChanged("OrderDate")
                    Me.OnOrderDateChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipDate", DbType:="DateTime")>
        Public Property ShipDate As System.Nullable(Of System.DateTime)
            Get
                Return Me._ShipDate
            End Get

            Set(ByVal value As System.Nullable(Of System.DateTime))
                If(Me._ShipDate <> value) Then
                    Me.OnShipDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._ShipDate = value
                    Me.SendPropertyChanged("ShipDate")
                    Me.OnShipDateChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubTotal", DbType:="Money NOT NULL")>
        Public Property SubTotal As Decimal
            Get
                Return Me._SubTotal
            End Get

            Set(ByVal value As Decimal)
                If(Me._SubTotal <> value) Then
                    Me.OnSubTotalChanging(value)
                    Me.SendPropertyChanging()
                    Me._SubTotal = value
                    Me.SendPropertyChanged("SubTotal")
                    Me.OnSubTotalChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxAmt", DbType:="Money NOT NULL")>
        Public Property TaxAmt As Decimal
            Get
                Return Me._TaxAmt
            End Get

            Set(ByVal value As Decimal)
                If(Me._TaxAmt <> value) Then
                    Me.OnTaxAmtChanging(value)
                    Me.SendPropertyChanging()
                    Me._TaxAmt = value
                    Me.SendPropertyChanged("TaxAmt")
                    Me.OnTaxAmtChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Freight", DbType:="Money NOT NULL")>
        Public Property Freight As Decimal
            Get
                Return Me._Freight
            End Get

            Set(ByVal value As Decimal)
                If(Me._Freight <> value) Then
                    Me.OnFreightChanging(value)
                    Me.SendPropertyChanging()
                    Me._Freight = value
                    Me.SendPropertyChanged("Freight")
                    Me.OnFreightChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalDue", AutoSync:=System.Data.Linq.Mapping.AutoSync.Always, DbType:="Money NOT NULL", IsDbGenerated:=True, UpdateCheck:=System.Data.Linq.Mapping.UpdateCheck.Never)>
        Public Property TotalDue As Decimal
            Get
                Return Me._TotalDue
            End Get

            Set(ByVal value As Decimal)
                If(Me._TotalDue <> value) Then
                    Me.OnTotalDueChanging(value)
                    Me.SendPropertyChanging()
                    Me._TotalDue = value
                    Me.SendPropertyChanged("TotalDue")
                    Me.OnTotalDueChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")>
        Public Property ModifiedDate As System.DateTime
            Get
                Return Me._ModifiedDate
            End Get

            Set(ByVal value As System.DateTime)
                If(Me._ModifiedDate <> value) Then
                    Me.OnModifiedDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._ModifiedDate = value
                    Me.SendPropertyChanged("ModifiedDate")
                    Me.OnModifiedDateChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.AssociationAttribute(Name:="PurchaseOrderHeader_PurchaseOrderDetail", Storage:="_PurchaseOrderDetails", ThisKey:="PurchaseOrderID", OtherKey:="PurchaseOrderID")>
        Public Property PurchaseOrderDetails As EntitySet(Of LinqServerModeOnAdvWorks.PurchaseOrderDetail)
            Get
                Return Me._PurchaseOrderDetails
            End Get

            Set(ByVal value As EntitySet(Of LinqServerModeOnAdvWorks.PurchaseOrderDetail))
                Me._PurchaseOrderDetails.Assign(value)
            End Set
        End Property

        <System.Data.Linq.Mapping.AssociationAttribute(Name:="Employee_PurchaseOrderHeader", Storage:="_Employee", ThisKey:="EmployeeID", OtherKey:="EmployeeID", IsForeignKey:=True)>
        Public Property Employee As Employee
            Get
                Return Me._Employee.Entity
            End Get

            Set(ByVal value As Employee)
                Dim previousValue As LinqServerModeOnAdvWorks.Employee = Me._Employee.Entity
                If((previousValue IsNot value) OrElse (Me._Employee.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If(previousValue IsNot Nothing) Then
                        Me._Employee.Entity = Nothing
                        previousValue.PurchaseOrderHeaders.Remove(Me)
                    End If

                    Me._Employee.Entity = value
                    If(value IsNot Nothing) Then
                        value.PurchaseOrderHeaders.Add(Me)
                        Me._EmployeeID = value.EmployeeID
                    Else
                        Me._EmployeeID = DirectCast(Nothing, System.Int32)
                    End If

                    Me.SendPropertyChanged("Employee")
                End If
            End Set
        End Property

        Public Event PropertyChanging As System.ComponentModel.PropertyChangingEventHandler Implements Global.System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements Global.System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, LinqServerModeOnAdvWorks.PurchaseOrderHeader.emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As System.[String])
            RaiseEvent PropertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
        End Sub

        Private Sub attach_PurchaseOrderDetails(ByVal entity As LinqServerModeOnAdvWorks.PurchaseOrderDetail)
            Me.SendPropertyChanging()
            entity.PurchaseOrderHeader = Me
        End Sub

        Private Sub detach_PurchaseOrderDetails(ByVal entity As LinqServerModeOnAdvWorks.PurchaseOrderDetail)
            Me.SendPropertyChanging()
            entity.PurchaseOrderHeader = Nothing
        End Sub
    End Class

    <System.Data.Linq.Mapping.TableAttribute(Name:="Purchasing.PurchaseOrderDetail")>
    Public Partial Class PurchaseOrderDetail
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As System.ComponentModel.PropertyChangingEventArgs = New System.ComponentModel.PropertyChangingEventArgs(System.[String].Empty)

        Private _PurchaseOrderID As Integer

        Private _PurchaseOrderDetailID As Integer

        Private _DueDate As System.DateTime

        Private _OrderQty As Short

        Private _ProductID As Integer

        Private _UnitPrice As Decimal

        Private _LineTotal As Decimal

        Private _ReceivedQty As Decimal

        Private _RejectedQty As Decimal

        Private _StockedQty As Decimal

        Private _ModifiedDate As System.DateTime

        Private _PurchaseOrderHeader As System.Data.Linq.EntityRef(Of LinqServerModeOnAdvWorks.PurchaseOrderHeader)

        Private _Product As System.Data.Linq.EntityRef(Of LinqServerModeOnAdvWorks.Product)

'#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub

        Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
        End Sub

        Partial Private Sub OnCreated()
        End Sub

        Partial Private Sub OnPurchaseOrderIDChanging(ByVal value As Integer)
        End Sub

        Partial Private Sub OnPurchaseOrderIDChanged()
        End Sub

        Partial Private Sub OnPurchaseOrderDetailIDChanging(ByVal value As Integer)
        End Sub

        Partial Private Sub OnPurchaseOrderDetailIDChanged()
        End Sub

        Partial Private Sub OnDueDateChanging(ByVal value As System.DateTime)
        End Sub

        Partial Private Sub OnDueDateChanged()
        End Sub

        Partial Private Sub OnOrderQtyChanging(ByVal value As Short)
        End Sub

        Partial Private Sub OnOrderQtyChanged()
        End Sub

        Partial Private Sub OnProductIDChanging(ByVal value As Integer)
        End Sub

        Partial Private Sub OnProductIDChanged()
        End Sub

        Partial Private Sub OnUnitPriceChanging(ByVal value As Decimal)
        End Sub

        Partial Private Sub OnUnitPriceChanged()
        End Sub

        Partial Private Sub OnLineTotalChanging(ByVal value As Decimal)
        End Sub

        Partial Private Sub OnLineTotalChanged()
        End Sub

        Partial Private Sub OnReceivedQtyChanging(ByVal value As Decimal)
        End Sub

        Partial Private Sub OnReceivedQtyChanged()
        End Sub

        Partial Private Sub OnRejectedQtyChanging(ByVal value As Decimal)
        End Sub

        Partial Private Sub OnRejectedQtyChanged()
        End Sub

        Partial Private Sub OnStockedQtyChanging(ByVal value As Decimal)
        End Sub

        Partial Private Sub OnStockedQtyChanged()
        End Sub

        Partial Private Sub OnModifiedDateChanging(ByVal value As System.DateTime)
        End Sub

        Partial Private Sub OnModifiedDateChanged()
        End Sub

'#End Region
        Public Sub New()
            Me._PurchaseOrderHeader = DirectCast(Nothing, Global.System.Data.Linq.EntityRef(Of Global.LinqServerModeOnAdvWorks.PurchaseOrderHeader))
            Me._Product = DirectCast(Nothing, Global.System.Data.Linq.EntityRef(Of Global.LinqServerModeOnAdvWorks.Product))
            Me.OnCreated()
        End Sub

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchaseOrderID", DbType:="Int NOT NULL", IsPrimaryKey:=True)>
        Public Property PurchaseOrderID As Integer
            Get
                Return Me._PurchaseOrderID
            End Get

            Set(ByVal value As Integer)
                If(Me._PurchaseOrderID <> value) Then
                    If Me._PurchaseOrderHeader.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If

                    Me.OnPurchaseOrderIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._PurchaseOrderID = value
                    Me.SendPropertyChanged("PurchaseOrderID")
                    Me.OnPurchaseOrderIDChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchaseOrderDetailID", AutoSync:=System.Data.Linq.Mapping.AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property PurchaseOrderDetailID As Integer
            Get
                Return Me._PurchaseOrderDetailID
            End Get

            Set(ByVal value As Integer)
                If(Me._PurchaseOrderDetailID <> value) Then
                    Me.OnPurchaseOrderDetailIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._PurchaseOrderDetailID = value
                    Me.SendPropertyChanged("PurchaseOrderDetailID")
                    Me.OnPurchaseOrderDetailIDChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DueDate", DbType:="DateTime NOT NULL")>
        Public Property DueDate As System.DateTime
            Get
                Return Me._DueDate
            End Get

            Set(ByVal value As System.DateTime)
                If(Me._DueDate <> value) Then
                    Me.OnDueDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._DueDate = value
                    Me.SendPropertyChanged("DueDate")
                    Me.OnDueDateChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderQty", DbType:="SmallInt NOT NULL")>
        Public Property OrderQty As Short
            Get
                Return Me._OrderQty
            End Get

            Set(ByVal value As Short)
                If(Me._OrderQty <> value) Then
                    Me.OnOrderQtyChanging(value)
                    Me.SendPropertyChanging()
                    Me._OrderQty = value
                    Me.SendPropertyChanged("OrderQty")
                    Me.OnOrderQtyChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Int NOT NULL")>
        Public Property ProductID As Integer
            Get
                Return Me._ProductID
            End Get

            Set(ByVal value As Integer)
                If(Me._ProductID <> value) Then
                    If Me._Product.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If

                    Me.OnProductIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ProductID = value
                    Me.SendPropertyChanged("ProductID")
                    Me.OnProductIDChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitPrice", DbType:="Money NOT NULL")>
        Public Property UnitPrice As Decimal
            Get
                Return Me._UnitPrice
            End Get

            Set(ByVal value As Decimal)
                If(Me._UnitPrice <> value) Then
                    Me.OnUnitPriceChanging(value)
                    Me.SendPropertyChanging()
                    Me._UnitPrice = value
                    Me.SendPropertyChanged("UnitPrice")
                    Me.OnUnitPriceChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LineTotal", AutoSync:=System.Data.Linq.Mapping.AutoSync.Always, DbType:="Money NOT NULL", IsDbGenerated:=True, UpdateCheck:=System.Data.Linq.Mapping.UpdateCheck.Never)>
        Public Property LineTotal As Decimal
            Get
                Return Me._LineTotal
            End Get

            Set(ByVal value As Decimal)
                If(Me._LineTotal <> value) Then
                    Me.OnLineTotalChanging(value)
                    Me.SendPropertyChanging()
                    Me._LineTotal = value
                    Me.SendPropertyChanged("LineTotal")
                    Me.OnLineTotalChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReceivedQty", DbType:="Decimal(8,2) NOT NULL")>
        Public Property ReceivedQty As Decimal
            Get
                Return Me._ReceivedQty
            End Get

            Set(ByVal value As Decimal)
                If(Me._ReceivedQty <> value) Then
                    Me.OnReceivedQtyChanging(value)
                    Me.SendPropertyChanging()
                    Me._ReceivedQty = value
                    Me.SendPropertyChanged("ReceivedQty")
                    Me.OnReceivedQtyChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RejectedQty", DbType:="Decimal(8,2) NOT NULL")>
        Public Property RejectedQty As Decimal
            Get
                Return Me._RejectedQty
            End Get

            Set(ByVal value As Decimal)
                If(Me._RejectedQty <> value) Then
                    Me.OnRejectedQtyChanging(value)
                    Me.SendPropertyChanging()
                    Me._RejectedQty = value
                    Me.SendPropertyChanged("RejectedQty")
                    Me.OnRejectedQtyChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StockedQty", AutoSync:=System.Data.Linq.Mapping.AutoSync.Always, DbType:="Decimal(9,2) NOT NULL", IsDbGenerated:=True, UpdateCheck:=System.Data.Linq.Mapping.UpdateCheck.Never)>
        Public Property StockedQty As Decimal
            Get
                Return Me._StockedQty
            End Get

            Set(ByVal value As Decimal)
                If(Me._StockedQty <> value) Then
                    Me.OnStockedQtyChanging(value)
                    Me.SendPropertyChanging()
                    Me._StockedQty = value
                    Me.SendPropertyChanged("StockedQty")
                    Me.OnStockedQtyChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")>
        Public Property ModifiedDate As System.DateTime
            Get
                Return Me._ModifiedDate
            End Get

            Set(ByVal value As System.DateTime)
                If(Me._ModifiedDate <> value) Then
                    Me.OnModifiedDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._ModifiedDate = value
                    Me.SendPropertyChanged("ModifiedDate")
                    Me.OnModifiedDateChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.AssociationAttribute(Name:="PurchaseOrderHeader_PurchaseOrderDetail", Storage:="_PurchaseOrderHeader", ThisKey:="PurchaseOrderID", OtherKey:="PurchaseOrderID", IsForeignKey:=True)>
        Public Property PurchaseOrderHeader As PurchaseOrderHeader
            Get
                Return Me._PurchaseOrderHeader.Entity
            End Get

            Set(ByVal value As PurchaseOrderHeader)
                Dim previousValue As LinqServerModeOnAdvWorks.PurchaseOrderHeader = Me._PurchaseOrderHeader.Entity
                If((previousValue IsNot value) OrElse (Me._PurchaseOrderHeader.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If(previousValue IsNot Nothing) Then
                        Me._PurchaseOrderHeader.Entity = Nothing
                        previousValue.PurchaseOrderDetails.Remove(Me)
                    End If

                    Me._PurchaseOrderHeader.Entity = value
                    If(value IsNot Nothing) Then
                        value.PurchaseOrderDetails.Add(Me)
                        Me._PurchaseOrderID = value.PurchaseOrderID
                    Else
                        Me._PurchaseOrderID = DirectCast(Nothing, System.Int32)
                    End If

                    Me.SendPropertyChanged("PurchaseOrderHeader")
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_PurchaseOrderDetail", Storage:="_Product", ThisKey:="ProductID", OtherKey:="ProductID", IsForeignKey:=True)>
        Public Property Product As Product
            Get
                Return Me._Product.Entity
            End Get

            Set(ByVal value As Product)
                Dim previousValue As LinqServerModeOnAdvWorks.Product = Me._Product.Entity
                If((previousValue IsNot value) OrElse (Me._Product.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If(previousValue IsNot Nothing) Then
                        Me._Product.Entity = Nothing
                        previousValue.PurchaseOrderDetails.Remove(Me)
                    End If

                    Me._Product.Entity = value
                    If(value IsNot Nothing) Then
                        value.PurchaseOrderDetails.Add(Me)
                        Me._ProductID = value.ProductID
                    Else
                        Me._ProductID = DirectCast(Nothing, System.Int32)
                    End If

                    Me.SendPropertyChanged("Product")
                End If
            End Set
        End Property

        Public Event PropertyChanging As System.ComponentModel.PropertyChangingEventHandler Implements Global.System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements Global.System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, LinqServerModeOnAdvWorks.PurchaseOrderDetail.emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As System.[String])
            RaiseEvent PropertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
        End Sub
    End Class

    <System.Data.Linq.Mapping.TableAttribute(Name:="Production.Product")>
    Public Partial Class Product
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As System.ComponentModel.PropertyChangingEventArgs = New System.ComponentModel.PropertyChangingEventArgs(System.[String].Empty)

        Private _ProductID As Integer

        Private _Name As String

        Private _ProductNumber As String

        Private _MakeFlag As Boolean

        Private _FinishedGoodsFlag As Boolean

        Private _Color As String

        Private _SafetyStockLevel As Short

        Private _ReorderPoint As Short

        Private _StandardCost As Decimal

        Private _ListPrice As Decimal

        Private _Size As String

        Private _SizeUnitMeasureCode As String

        Private _WeightUnitMeasureCode As String

        Private _Weight As System.Nullable(Of Decimal)

        Private _DaysToManufacture As Integer

        Private _ProductLine As String

        Private _Class As String

        Private _Style As String

        Private _ProductSubcategoryID As System.Nullable(Of Integer)

        Private _ProductModelID As System.Nullable(Of Integer)

        Private _SellStartDate As System.DateTime

        Private _SellEndDate As System.Nullable(Of System.DateTime)

        Private _DiscontinuedDate As System.Nullable(Of System.DateTime)

        Private _rowguid As System.Guid

        Private _ModifiedDate As System.DateTime

        Private _PurchaseOrderDetails As System.Data.Linq.EntitySet(Of LinqServerModeOnAdvWorks.PurchaseOrderDetail)

'#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub

        Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
        End Sub

        Partial Private Sub OnCreated()
        End Sub

        Partial Private Sub OnProductIDChanging(ByVal value As Integer)
        End Sub

        Partial Private Sub OnProductIDChanged()
        End Sub

        Partial Private Sub OnNameChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnNameChanged()
        End Sub

        Partial Private Sub OnProductNumberChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnProductNumberChanged()
        End Sub

        Partial Private Sub OnMakeFlagChanging(ByVal value As Boolean)
        End Sub

        Partial Private Sub OnMakeFlagChanged()
        End Sub

        Partial Private Sub OnFinishedGoodsFlagChanging(ByVal value As Boolean)
        End Sub

        Partial Private Sub OnFinishedGoodsFlagChanged()
        End Sub

        Partial Private Sub OnColorChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnColorChanged()
        End Sub

        Partial Private Sub OnSafetyStockLevelChanging(ByVal value As Short)
        End Sub

        Partial Private Sub OnSafetyStockLevelChanged()
        End Sub

        Partial Private Sub OnReorderPointChanging(ByVal value As Short)
        End Sub

        Partial Private Sub OnReorderPointChanged()
        End Sub

        Partial Private Sub OnStandardCostChanging(ByVal value As Decimal)
        End Sub

        Partial Private Sub OnStandardCostChanged()
        End Sub

        Partial Private Sub OnListPriceChanging(ByVal value As Decimal)
        End Sub

        Partial Private Sub OnListPriceChanged()
        End Sub

        Partial Private Sub OnSizeChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnSizeChanged()
        End Sub

        Partial Private Sub OnSizeUnitMeasureCodeChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnSizeUnitMeasureCodeChanged()
        End Sub

        Partial Private Sub OnWeightUnitMeasureCodeChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnWeightUnitMeasureCodeChanged()
        End Sub

        Partial Private Sub OnWeightChanging(ByVal value As System.Nullable(Of Decimal))
        End Sub

        Partial Private Sub OnWeightChanged()
        End Sub

        Partial Private Sub OnDaysToManufactureChanging(ByVal value As Integer)
        End Sub

        Partial Private Sub OnDaysToManufactureChanged()
        End Sub

        Partial Private Sub OnProductLineChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnProductLineChanged()
        End Sub

        Partial Private Sub OnClassChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnClassChanged()
        End Sub

        Partial Private Sub OnStyleChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnStyleChanged()
        End Sub

        Partial Private Sub OnProductSubcategoryIDChanging(ByVal value As System.Nullable(Of Integer))
        End Sub

        Partial Private Sub OnProductSubcategoryIDChanged()
        End Sub

        Partial Private Sub OnProductModelIDChanging(ByVal value As System.Nullable(Of Integer))
        End Sub

        Partial Private Sub OnProductModelIDChanged()
        End Sub

        Partial Private Sub OnSellStartDateChanging(ByVal value As System.DateTime)
        End Sub

        Partial Private Sub OnSellStartDateChanged()
        End Sub

        Partial Private Sub OnSellEndDateChanging(ByVal value As System.Nullable(Of System.DateTime))
        End Sub

        Partial Private Sub OnSellEndDateChanged()
        End Sub

        Partial Private Sub OnDiscontinuedDateChanging(ByVal value As System.Nullable(Of System.DateTime))
        End Sub

        Partial Private Sub OnDiscontinuedDateChanged()
        End Sub

        Partial Private Sub OnrowguidChanging(ByVal value As System.Guid)
        End Sub

        Partial Private Sub OnrowguidChanged()
        End Sub

        Partial Private Sub OnModifiedDateChanging(ByVal value As System.DateTime)
        End Sub

        Partial Private Sub OnModifiedDateChanged()
        End Sub

'#End Region
        Public Sub New()
            Me._PurchaseOrderDetails = New System.Data.Linq.EntitySet(Of LinqServerModeOnAdvWorks.PurchaseOrderDetail)(New System.Action(Of LinqServerModeOnAdvWorks.PurchaseOrderDetail)(AddressOf Me.attach_PurchaseOrderDetails), New System.Action(Of LinqServerModeOnAdvWorks.PurchaseOrderDetail)(AddressOf Me.detach_PurchaseOrderDetails))
            Me.OnCreated()
        End Sub

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", AutoSync:=System.Data.Linq.Mapping.AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property ProductID As Integer
            Get
                Return Me._ProductID
            End Get

            Set(ByVal value As Integer)
                If(Me._ProductID <> value) Then
                    Me.OnProductIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ProductID = value
                    Me.SendPropertyChanged("ProductID")
                    Me.OnProductIDChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)>
        Public Property Name As String
            Get
                Return Me._Name
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Name, value)) Then
                    Me.OnNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._Name = value
                    Me.SendPropertyChanged("Name")
                    Me.OnNameChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductNumber", DbType:="NVarChar(25) NOT NULL", CanBeNull:=False)>
        Public Property ProductNumber As String
            Get
                Return Me._ProductNumber
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._ProductNumber, value)) Then
                    Me.OnProductNumberChanging(value)
                    Me.SendPropertyChanging()
                    Me._ProductNumber = value
                    Me.SendPropertyChanged("ProductNumber")
                    Me.OnProductNumberChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MakeFlag", DbType:="Bit NOT NULL")>
        Public Property MakeFlag As Boolean
            Get
                Return Me._MakeFlag
            End Get

            Set(ByVal value As Boolean)
                If(Me._MakeFlag <> value) Then
                    Me.OnMakeFlagChanging(value)
                    Me.SendPropertyChanging()
                    Me._MakeFlag = value
                    Me.SendPropertyChanged("MakeFlag")
                    Me.OnMakeFlagChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinishedGoodsFlag", DbType:="Bit NOT NULL")>
        Public Property FinishedGoodsFlag As Boolean
            Get
                Return Me._FinishedGoodsFlag
            End Get

            Set(ByVal value As Boolean)
                If(Me._FinishedGoodsFlag <> value) Then
                    Me.OnFinishedGoodsFlagChanging(value)
                    Me.SendPropertyChanging()
                    Me._FinishedGoodsFlag = value
                    Me.SendPropertyChanged("FinishedGoodsFlag")
                    Me.OnFinishedGoodsFlagChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Color", DbType:="NVarChar(15)")>
        Public Property Color As String
            Get
                Return Me._Color
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Color, value)) Then
                    Me.OnColorChanging(value)
                    Me.SendPropertyChanging()
                    Me._Color = value
                    Me.SendPropertyChanged("Color")
                    Me.OnColorChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SafetyStockLevel", DbType:="SmallInt NOT NULL")>
        Public Property SafetyStockLevel As Short
            Get
                Return Me._SafetyStockLevel
            End Get

            Set(ByVal value As Short)
                If(Me._SafetyStockLevel <> value) Then
                    Me.OnSafetyStockLevelChanging(value)
                    Me.SendPropertyChanging()
                    Me._SafetyStockLevel = value
                    Me.SendPropertyChanged("SafetyStockLevel")
                    Me.OnSafetyStockLevelChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReorderPoint", DbType:="SmallInt NOT NULL")>
        Public Property ReorderPoint As Short
            Get
                Return Me._ReorderPoint
            End Get

            Set(ByVal value As Short)
                If(Me._ReorderPoint <> value) Then
                    Me.OnReorderPointChanging(value)
                    Me.SendPropertyChanging()
                    Me._ReorderPoint = value
                    Me.SendPropertyChanged("ReorderPoint")
                    Me.OnReorderPointChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StandardCost", DbType:="Money NOT NULL")>
        Public Property StandardCost As Decimal
            Get
                Return Me._StandardCost
            End Get

            Set(ByVal value As Decimal)
                If(Me._StandardCost <> value) Then
                    Me.OnStandardCostChanging(value)
                    Me.SendPropertyChanging()
                    Me._StandardCost = value
                    Me.SendPropertyChanged("StandardCost")
                    Me.OnStandardCostChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ListPrice", DbType:="Money NOT NULL")>
        Public Property ListPrice As Decimal
            Get
                Return Me._ListPrice
            End Get

            Set(ByVal value As Decimal)
                If(Me._ListPrice <> value) Then
                    Me.OnListPriceChanging(value)
                    Me.SendPropertyChanging()
                    Me._ListPrice = value
                    Me.SendPropertyChanged("ListPrice")
                    Me.OnListPriceChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Size", DbType:="NVarChar(5)")>
        Public Property Size As String
            Get
                Return Me._Size
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Size, value)) Then
                    Me.OnSizeChanging(value)
                    Me.SendPropertyChanging()
                    Me._Size = value
                    Me.SendPropertyChanged("Size")
                    Me.OnSizeChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SizeUnitMeasureCode", DbType:="NChar(3)")>
        Public Property SizeUnitMeasureCode As String
            Get
                Return Me._SizeUnitMeasureCode
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._SizeUnitMeasureCode, value)) Then
                    Me.OnSizeUnitMeasureCodeChanging(value)
                    Me.SendPropertyChanging()
                    Me._SizeUnitMeasureCode = value
                    Me.SendPropertyChanged("SizeUnitMeasureCode")
                    Me.OnSizeUnitMeasureCodeChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightUnitMeasureCode", DbType:="NChar(3)")>
        Public Property WeightUnitMeasureCode As String
            Get
                Return Me._WeightUnitMeasureCode
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._WeightUnitMeasureCode, value)) Then
                    Me.OnWeightUnitMeasureCodeChanging(value)
                    Me.SendPropertyChanging()
                    Me._WeightUnitMeasureCode = value
                    Me.SendPropertyChanged("WeightUnitMeasureCode")
                    Me.OnWeightUnitMeasureCodeChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Weight", DbType:="Decimal(8,2)")>
        Public Property Weight As System.Nullable(Of Decimal)
            Get
                Return Me._Weight
            End Get

            Set(ByVal value As System.Nullable(Of Decimal))
                If(Me._Weight <> value) Then
                    Me.OnWeightChanging(value)
                    Me.SendPropertyChanging()
                    Me._Weight = value
                    Me.SendPropertyChanged("Weight")
                    Me.OnWeightChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DaysToManufacture", DbType:="Int NOT NULL")>
        Public Property DaysToManufacture As Integer
            Get
                Return Me._DaysToManufacture
            End Get

            Set(ByVal value As Integer)
                If(Me._DaysToManufacture <> value) Then
                    Me.OnDaysToManufactureChanging(value)
                    Me.SendPropertyChanging()
                    Me._DaysToManufacture = value
                    Me.SendPropertyChanged("DaysToManufacture")
                    Me.OnDaysToManufactureChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductLine", DbType:="NChar(2)")>
        Public Property ProductLine As String
            Get
                Return Me._ProductLine
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._ProductLine, value)) Then
                    Me.OnProductLineChanging(value)
                    Me.SendPropertyChanging()
                    Me._ProductLine = value
                    Me.SendPropertyChanged("ProductLine")
                    Me.OnProductLineChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class", DbType:="NChar(2)")>
        Public Property [Class] As String
            Get
                Return Me._Class
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Class, value)) Then
                    Me.OnClassChanging(value)
                    Me.SendPropertyChanging()
                    Me._Class = value
                    Me.SendPropertyChanged("Class")
                    Me.OnClassChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Style", DbType:="NChar(2)")>
        Public Property Style As String
            Get
                Return Me._Style
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Style, value)) Then
                    Me.OnStyleChanging(value)
                    Me.SendPropertyChanging()
                    Me._Style = value
                    Me.SendPropertyChanged("Style")
                    Me.OnStyleChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductSubcategoryID", DbType:="Int")>
        Public Property ProductSubcategoryID As System.Nullable(Of Integer)
            Get
                Return Me._ProductSubcategoryID
            End Get

            Set(ByVal value As System.Nullable(Of Integer))
                If(Me._ProductSubcategoryID <> value) Then
                    Me.OnProductSubcategoryIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ProductSubcategoryID = value
                    Me.SendPropertyChanged("ProductSubcategoryID")
                    Me.OnProductSubcategoryIDChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductModelID", DbType:="Int")>
        Public Property ProductModelID As System.Nullable(Of Integer)
            Get
                Return Me._ProductModelID
            End Get

            Set(ByVal value As System.Nullable(Of Integer))
                If(Me._ProductModelID <> value) Then
                    Me.OnProductModelIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ProductModelID = value
                    Me.SendPropertyChanged("ProductModelID")
                    Me.OnProductModelIDChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SellStartDate", DbType:="DateTime NOT NULL")>
        Public Property SellStartDate As System.DateTime
            Get
                Return Me._SellStartDate
            End Get

            Set(ByVal value As System.DateTime)
                If(Me._SellStartDate <> value) Then
                    Me.OnSellStartDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._SellStartDate = value
                    Me.SendPropertyChanged("SellStartDate")
                    Me.OnSellStartDateChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SellEndDate", DbType:="DateTime")>
        Public Property SellEndDate As System.Nullable(Of System.DateTime)
            Get
                Return Me._SellEndDate
            End Get

            Set(ByVal value As System.Nullable(Of System.DateTime))
                If(Me._SellEndDate <> value) Then
                    Me.OnSellEndDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._SellEndDate = value
                    Me.SendPropertyChanged("SellEndDate")
                    Me.OnSellEndDateChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiscontinuedDate", DbType:="DateTime")>
        Public Property DiscontinuedDate As System.Nullable(Of System.DateTime)
            Get
                Return Me._DiscontinuedDate
            End Get

            Set(ByVal value As System.Nullable(Of System.DateTime))
                If(Me._DiscontinuedDate <> value) Then
                    Me.OnDiscontinuedDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._DiscontinuedDate = value
                    Me.SendPropertyChanged("DiscontinuedDate")
                    Me.OnDiscontinuedDateChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")>
        Public Property rowguid As System.Guid
            Get
                Return Me._rowguid
            End Get

            Set(ByVal value As System.Guid)
                If(Me._rowguid <> value) Then
                    Me.OnrowguidChanging(value)
                    Me.SendPropertyChanging()
                    Me._rowguid = value
                    Me.SendPropertyChanged("rowguid")
                    Me.OnrowguidChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")>
        Public Property ModifiedDate As System.DateTime
            Get
                Return Me._ModifiedDate
            End Get

            Set(ByVal value As System.DateTime)
                If(Me._ModifiedDate <> value) Then
                    Me.OnModifiedDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._ModifiedDate = value
                    Me.SendPropertyChanged("ModifiedDate")
                    Me.OnModifiedDateChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_PurchaseOrderDetail", Storage:="_PurchaseOrderDetails", ThisKey:="ProductID", OtherKey:="ProductID")>
        Public Property PurchaseOrderDetails As EntitySet(Of LinqServerModeOnAdvWorks.PurchaseOrderDetail)
            Get
                Return Me._PurchaseOrderDetails
            End Get

            Set(ByVal value As EntitySet(Of LinqServerModeOnAdvWorks.PurchaseOrderDetail))
                Me._PurchaseOrderDetails.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As System.ComponentModel.PropertyChangingEventHandler Implements Global.System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements Global.System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, LinqServerModeOnAdvWorks.Product.emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As System.[String])
            RaiseEvent PropertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
        End Sub

        Private Sub attach_PurchaseOrderDetails(ByVal entity As LinqServerModeOnAdvWorks.PurchaseOrderDetail)
            Me.SendPropertyChanging()
            entity.Product = Me
        End Sub

        Private Sub detach_PurchaseOrderDetails(ByVal entity As LinqServerModeOnAdvWorks.PurchaseOrderDetail)
            Me.SendPropertyChanging()
            entity.Product = Nothing
        End Sub
    End Class

    <System.Data.Linq.Mapping.TableAttribute(Name:="HumanResources.Employee")>
    Public Partial Class Employee
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As System.ComponentModel.PropertyChangingEventArgs = New System.ComponentModel.PropertyChangingEventArgs(System.[String].Empty)

        Private _EmployeeID As Integer

        Private _NationalIDNumber As String

        Private _ContactID As Integer

        Private _LoginID As String

        Private _ManagerID As System.Nullable(Of Integer)

        Private _Title As String

        Private _BirthDate As System.DateTime

        Private _MaritalStatus As Char

        Private _Gender As Char

        Private _HireDate As System.DateTime

        Private _SalariedFlag As Boolean

        Private _VacationHours As Short

        Private _SickLeaveHours As Short

        Private _CurrentFlag As Boolean

        Private _rowguid As System.Guid

        Private _ModifiedDate As System.DateTime

        Private _PurchaseOrderHeaders As System.Data.Linq.EntitySet(Of LinqServerModeOnAdvWorks.PurchaseOrderHeader)

        Private _Employees As System.Data.Linq.EntitySet(Of LinqServerModeOnAdvWorks.Employee)

        Private _Employee1 As System.Data.Linq.EntityRef(Of LinqServerModeOnAdvWorks.Employee)

        Private _Contact As System.Data.Linq.EntityRef(Of LinqServerModeOnAdvWorks.Contact)

'#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub

        Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
        End Sub

        Partial Private Sub OnCreated()
        End Sub

        Partial Private Sub OnEmployeeIDChanging(ByVal value As Integer)
        End Sub

        Partial Private Sub OnEmployeeIDChanged()
        End Sub

        Partial Private Sub OnNationalIDNumberChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnNationalIDNumberChanged()
        End Sub

        Partial Private Sub OnContactIDChanging(ByVal value As Integer)
        End Sub

        Partial Private Sub OnContactIDChanged()
        End Sub

        Partial Private Sub OnLoginIDChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnLoginIDChanged()
        End Sub

        Partial Private Sub OnManagerIDChanging(ByVal value As System.Nullable(Of Integer))
        End Sub

        Partial Private Sub OnManagerIDChanged()
        End Sub

        Partial Private Sub OnTitleChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnTitleChanged()
        End Sub

        Partial Private Sub OnBirthDateChanging(ByVal value As System.DateTime)
        End Sub

        Partial Private Sub OnBirthDateChanged()
        End Sub

        Partial Private Sub OnMaritalStatusChanging(ByVal value As Char)
        End Sub

        Partial Private Sub OnMaritalStatusChanged()
        End Sub

        Partial Private Sub OnGenderChanging(ByVal value As Char)
        End Sub

        Partial Private Sub OnGenderChanged()
        End Sub

        Partial Private Sub OnHireDateChanging(ByVal value As System.DateTime)
        End Sub

        Partial Private Sub OnHireDateChanged()
        End Sub

        Partial Private Sub OnSalariedFlagChanging(ByVal value As Boolean)
        End Sub

        Partial Private Sub OnSalariedFlagChanged()
        End Sub

        Partial Private Sub OnVacationHoursChanging(ByVal value As Short)
        End Sub

        Partial Private Sub OnVacationHoursChanged()
        End Sub

        Partial Private Sub OnSickLeaveHoursChanging(ByVal value As Short)
        End Sub

        Partial Private Sub OnSickLeaveHoursChanged()
        End Sub

        Partial Private Sub OnCurrentFlagChanging(ByVal value As Boolean)
        End Sub

        Partial Private Sub OnCurrentFlagChanged()
        End Sub

        Partial Private Sub OnrowguidChanging(ByVal value As System.Guid)
        End Sub

        Partial Private Sub OnrowguidChanged()
        End Sub

        Partial Private Sub OnModifiedDateChanging(ByVal value As System.DateTime)
        End Sub

        Partial Private Sub OnModifiedDateChanged()
        End Sub

'#End Region
        Public Sub New()
            Me._PurchaseOrderHeaders = New System.Data.Linq.EntitySet(Of LinqServerModeOnAdvWorks.PurchaseOrderHeader)(New System.Action(Of LinqServerModeOnAdvWorks.PurchaseOrderHeader)(AddressOf Me.attach_PurchaseOrderHeaders), New System.Action(Of LinqServerModeOnAdvWorks.PurchaseOrderHeader)(AddressOf Me.detach_PurchaseOrderHeaders))
            Me._Employees = New System.Data.Linq.EntitySet(Of LinqServerModeOnAdvWorks.Employee)(New System.Action(Of LinqServerModeOnAdvWorks.Employee)(AddressOf Me.attach_Employees), New System.Action(Of LinqServerModeOnAdvWorks.Employee)(AddressOf Me.detach_Employees))
            Me._Employee1 = DirectCast(Nothing, Global.System.Data.Linq.EntityRef(Of Global.LinqServerModeOnAdvWorks.Employee))
            Me._Contact = DirectCast(Nothing, Global.System.Data.Linq.EntityRef(Of Global.LinqServerModeOnAdvWorks.Contact))
            Me.OnCreated()
        End Sub

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeID", AutoSync:=System.Data.Linq.Mapping.AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property EmployeeID As Integer
            Get
                Return Me._EmployeeID
            End Get

            Set(ByVal value As Integer)
                If(Me._EmployeeID <> value) Then
                    Me.OnEmployeeIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._EmployeeID = value
                    Me.SendPropertyChanged("EmployeeID")
                    Me.OnEmployeeIDChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NationalIDNumber", DbType:="NVarChar(15) NOT NULL", CanBeNull:=False)>
        Public Property NationalIDNumber As String
            Get
                Return Me._NationalIDNumber
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._NationalIDNumber, value)) Then
                    Me.OnNationalIDNumberChanging(value)
                    Me.SendPropertyChanging()
                    Me._NationalIDNumber = value
                    Me.SendPropertyChanged("NationalIDNumber")
                    Me.OnNationalIDNumberChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactID", DbType:="Int NOT NULL")>
        Public Property ContactID As Integer
            Get
                Return Me._ContactID
            End Get

            Set(ByVal value As Integer)
                If(Me._ContactID <> value) Then
                    If Me._Contact.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If

                    Me.OnContactIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ContactID = value
                    Me.SendPropertyChanged("ContactID")
                    Me.OnContactIDChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoginID", DbType:="NVarChar(256) NOT NULL", CanBeNull:=False)>
        Public Property LoginID As String
            Get
                Return Me._LoginID
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._LoginID, value)) Then
                    Me.OnLoginIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._LoginID = value
                    Me.SendPropertyChanged("LoginID")
                    Me.OnLoginIDChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ManagerID", DbType:="Int")>
        Public Property ManagerID As System.Nullable(Of Integer)
            Get
                Return Me._ManagerID
            End Get

            Set(ByVal value As System.Nullable(Of Integer))
                If(Me._ManagerID <> value) Then
                    If Me._Employee1.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If

                    Me.OnManagerIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ManagerID = value
                    Me.SendPropertyChanged("ManagerID")
                    Me.OnManagerIDChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)>
        Public Property Title As String
            Get
                Return Me._Title
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Title, value)) Then
                    Me.OnTitleChanging(value)
                    Me.SendPropertyChanging()
                    Me._Title = value
                    Me.SendPropertyChanged("Title")
                    Me.OnTitleChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BirthDate", DbType:="DateTime NOT NULL")>
        Public Property BirthDate As System.DateTime
            Get
                Return Me._BirthDate
            End Get

            Set(ByVal value As System.DateTime)
                If(Me._BirthDate <> value) Then
                    Me.OnBirthDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._BirthDate = value
                    Me.SendPropertyChanged("BirthDate")
                    Me.OnBirthDateChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaritalStatus", DbType:="NChar(1) NOT NULL")>
        Public Property MaritalStatus As Char
            Get
                Return Me._MaritalStatus
            End Get

            Set(ByVal value As Char)
                If(Me._MaritalStatus <> value) Then
                    Me.OnMaritalStatusChanging(value)
                    Me.SendPropertyChanging()
                    Me._MaritalStatus = value
                    Me.SendPropertyChanged("MaritalStatus")
                    Me.OnMaritalStatusChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", DbType:="NChar(1) NOT NULL")>
        Public Property Gender As Char
            Get
                Return Me._Gender
            End Get

            Set(ByVal value As Char)
                If(Me._Gender <> value) Then
                    Me.OnGenderChanging(value)
                    Me.SendPropertyChanging()
                    Me._Gender = value
                    Me.SendPropertyChanged("Gender")
                    Me.OnGenderChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HireDate", DbType:="DateTime NOT NULL")>
        Public Property HireDate As System.DateTime
            Get
                Return Me._HireDate
            End Get

            Set(ByVal value As System.DateTime)
                If(Me._HireDate <> value) Then
                    Me.OnHireDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._HireDate = value
                    Me.SendPropertyChanged("HireDate")
                    Me.OnHireDateChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalariedFlag", DbType:="Bit NOT NULL")>
        Public Property SalariedFlag As Boolean
            Get
                Return Me._SalariedFlag
            End Get

            Set(ByVal value As Boolean)
                If(Me._SalariedFlag <> value) Then
                    Me.OnSalariedFlagChanging(value)
                    Me.SendPropertyChanging()
                    Me._SalariedFlag = value
                    Me.SendPropertyChanged("SalariedFlag")
                    Me.OnSalariedFlagChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VacationHours", DbType:="SmallInt NOT NULL")>
        Public Property VacationHours As Short
            Get
                Return Me._VacationHours
            End Get

            Set(ByVal value As Short)
                If(Me._VacationHours <> value) Then
                    Me.OnVacationHoursChanging(value)
                    Me.SendPropertyChanging()
                    Me._VacationHours = value
                    Me.SendPropertyChanged("VacationHours")
                    Me.OnVacationHoursChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SickLeaveHours", DbType:="SmallInt NOT NULL")>
        Public Property SickLeaveHours As Short
            Get
                Return Me._SickLeaveHours
            End Get

            Set(ByVal value As Short)
                If(Me._SickLeaveHours <> value) Then
                    Me.OnSickLeaveHoursChanging(value)
                    Me.SendPropertyChanging()
                    Me._SickLeaveHours = value
                    Me.SendPropertyChanged("SickLeaveHours")
                    Me.OnSickLeaveHoursChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentFlag", DbType:="Bit NOT NULL")>
        Public Property CurrentFlag As Boolean
            Get
                Return Me._CurrentFlag
            End Get

            Set(ByVal value As Boolean)
                If(Me._CurrentFlag <> value) Then
                    Me.OnCurrentFlagChanging(value)
                    Me.SendPropertyChanging()
                    Me._CurrentFlag = value
                    Me.SendPropertyChanged("CurrentFlag")
                    Me.OnCurrentFlagChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")>
        Public Property rowguid As System.Guid
            Get
                Return Me._rowguid
            End Get

            Set(ByVal value As System.Guid)
                If(Me._rowguid <> value) Then
                    Me.OnrowguidChanging(value)
                    Me.SendPropertyChanging()
                    Me._rowguid = value
                    Me.SendPropertyChanged("rowguid")
                    Me.OnrowguidChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")>
        Public Property ModifiedDate As System.DateTime
            Get
                Return Me._ModifiedDate
            End Get

            Set(ByVal value As System.DateTime)
                If(Me._ModifiedDate <> value) Then
                    Me.OnModifiedDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._ModifiedDate = value
                    Me.SendPropertyChanged("ModifiedDate")
                    Me.OnModifiedDateChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.AssociationAttribute(Name:="Employee_PurchaseOrderHeader", Storage:="_PurchaseOrderHeaders", ThisKey:="EmployeeID", OtherKey:="EmployeeID")>
        Public Property PurchaseOrderHeaders As EntitySet(Of LinqServerModeOnAdvWorks.PurchaseOrderHeader)
            Get
                Return Me._PurchaseOrderHeaders
            End Get

            Set(ByVal value As EntitySet(Of LinqServerModeOnAdvWorks.PurchaseOrderHeader))
                Me._PurchaseOrderHeaders.Assign(value)
            End Set
        End Property

        <System.Data.Linq.Mapping.AssociationAttribute(Name:="Employee_Employee", Storage:="_Employees", ThisKey:="EmployeeID", OtherKey:="ManagerID")>
        Public Property Employees As EntitySet(Of LinqServerModeOnAdvWorks.Employee)
            Get
                Return Me._Employees
            End Get

            Set(ByVal value As EntitySet(Of LinqServerModeOnAdvWorks.Employee))
                Me._Employees.Assign(value)
            End Set
        End Property

        <System.Data.Linq.Mapping.AssociationAttribute(Name:="Employee_Employee", Storage:="_Employee1", ThisKey:="ManagerID", OtherKey:="EmployeeID", IsForeignKey:=True)>
        Public Property Employee1 As Employee
            Get
                Return Me._Employee1.Entity
            End Get

            Set(ByVal value As Employee)
                Dim previousValue As LinqServerModeOnAdvWorks.Employee = Me._Employee1.Entity
                If((previousValue IsNot value) OrElse (Me._Employee1.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If(previousValue IsNot Nothing) Then
                        Me._Employee1.Entity = Nothing
                        previousValue.Employees.Remove(Me)
                    End If

                    Me._Employee1.Entity = value
                    If(value IsNot Nothing) Then
                        value.Employees.Add(Me)
                        Me._ManagerID = value.EmployeeID
                    Else
                        Me._ManagerID = DirectCast(Nothing, System.Int32?)
                    End If

                    Me.SendPropertyChanged("Employee1")
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.AssociationAttribute(Name:="Contact_Employee", Storage:="_Contact", ThisKey:="ContactID", OtherKey:="ContactID", IsForeignKey:=True)>
        Public Property Contact As Contact
            Get
                Return Me._Contact.Entity
            End Get

            Set(ByVal value As Contact)
                Dim previousValue As LinqServerModeOnAdvWorks.Contact = Me._Contact.Entity
                If((previousValue IsNot value) OrElse (Me._Contact.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If(previousValue IsNot Nothing) Then
                        Me._Contact.Entity = Nothing
                        previousValue.Employees.Remove(Me)
                    End If

                    Me._Contact.Entity = value
                    If(value IsNot Nothing) Then
                        value.Employees.Add(Me)
                        Me._ContactID = value.ContactID
                    Else
                        Me._ContactID = DirectCast(Nothing, System.Int32)
                    End If

                    Me.SendPropertyChanged("Contact")
                End If
            End Set
        End Property

        Public Event PropertyChanging As System.ComponentModel.PropertyChangingEventHandler Implements Global.System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements Global.System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, LinqServerModeOnAdvWorks.Employee.emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As System.[String])
            RaiseEvent PropertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
        End Sub

        Private Sub attach_PurchaseOrderHeaders(ByVal entity As LinqServerModeOnAdvWorks.PurchaseOrderHeader)
            Me.SendPropertyChanging()
            entity.Employee = Me
        End Sub

        Private Sub detach_PurchaseOrderHeaders(ByVal entity As LinqServerModeOnAdvWorks.PurchaseOrderHeader)
            Me.SendPropertyChanging()
            entity.Employee = Nothing
        End Sub

        Private Sub attach_Employees(ByVal entity As LinqServerModeOnAdvWorks.Employee)
            Me.SendPropertyChanging()
            entity.Employee1 = Me
        End Sub

        Private Sub detach_Employees(ByVal entity As LinqServerModeOnAdvWorks.Employee)
            Me.SendPropertyChanging()
            entity.Employee1 = Nothing
        End Sub
    End Class

    <System.Data.Linq.Mapping.TableAttribute(Name:="Person.Contact")>
    Public Partial Class Contact
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As System.ComponentModel.PropertyChangingEventArgs = New System.ComponentModel.PropertyChangingEventArgs(System.[String].Empty)

        Private _ContactID As Integer

        Private _NameStyle As Boolean

        Private _Title As String

        Private _FirstName As String

        Private _MiddleName As String

        Private _LastName As String

        Private _Suffix As String

        Private _EmailAddress As String

        Private _EmailPromotion As Integer

        Private _Phone As String

        Private _PasswordHash As String

        Private _PasswordSalt As String

        Private _AdditionalContactInfo As System.Xml.Linq.XElement

        Private _rowguid As System.Guid

        Private _ModifiedDate As System.DateTime

        Private _Employees As System.Data.Linq.EntitySet(Of LinqServerModeOnAdvWorks.Employee)

'#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub

        Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
        End Sub

        Partial Private Sub OnCreated()
        End Sub

        Partial Private Sub OnContactIDChanging(ByVal value As Integer)
        End Sub

        Partial Private Sub OnContactIDChanged()
        End Sub

        Partial Private Sub OnNameStyleChanging(ByVal value As Boolean)
        End Sub

        Partial Private Sub OnNameStyleChanged()
        End Sub

        Partial Private Sub OnTitleChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnTitleChanged()
        End Sub

        Partial Private Sub OnFirstNameChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnFirstNameChanged()
        End Sub

        Partial Private Sub OnMiddleNameChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnMiddleNameChanged()
        End Sub

        Partial Private Sub OnLastNameChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnLastNameChanged()
        End Sub

        Partial Private Sub OnSuffixChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnSuffixChanged()
        End Sub

        Partial Private Sub OnEmailAddressChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnEmailAddressChanged()
        End Sub

        Partial Private Sub OnEmailPromotionChanging(ByVal value As Integer)
        End Sub

        Partial Private Sub OnEmailPromotionChanged()
        End Sub

        Partial Private Sub OnPhoneChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnPhoneChanged()
        End Sub

        Partial Private Sub OnPasswordHashChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnPasswordHashChanged()
        End Sub

        Partial Private Sub OnPasswordSaltChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnPasswordSaltChanged()
        End Sub

        Partial Private Sub OnAdditionalContactInfoChanging(ByVal value As System.Xml.Linq.XElement)
        End Sub

        Partial Private Sub OnAdditionalContactInfoChanged()
        End Sub

        Partial Private Sub OnrowguidChanging(ByVal value As System.Guid)
        End Sub

        Partial Private Sub OnrowguidChanged()
        End Sub

        Partial Private Sub OnModifiedDateChanging(ByVal value As System.DateTime)
        End Sub

        Partial Private Sub OnModifiedDateChanged()
        End Sub

'#End Region
        Public Sub New()
            Me._Employees = New System.Data.Linq.EntitySet(Of LinqServerModeOnAdvWorks.Employee)(New System.Action(Of LinqServerModeOnAdvWorks.Employee)(AddressOf Me.attach_Employees), New System.Action(Of LinqServerModeOnAdvWorks.Employee)(AddressOf Me.detach_Employees))
            Me.OnCreated()
        End Sub

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactID", AutoSync:=System.Data.Linq.Mapping.AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property ContactID As Integer
            Get
                Return Me._ContactID
            End Get

            Set(ByVal value As Integer)
                If(Me._ContactID <> value) Then
                    Me.OnContactIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ContactID = value
                    Me.SendPropertyChanged("ContactID")
                    Me.OnContactIDChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NameStyle", DbType:="Bit NOT NULL")>
        Public Property NameStyle As Boolean
            Get
                Return Me._NameStyle
            End Get

            Set(ByVal value As Boolean)
                If(Me._NameStyle <> value) Then
                    Me.OnNameStyleChanging(value)
                    Me.SendPropertyChanging()
                    Me._NameStyle = value
                    Me.SendPropertyChanged("NameStyle")
                    Me.OnNameStyleChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(8)")>
        Public Property Title As String
            Get
                Return Me._Title
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Title, value)) Then
                    Me.OnTitleChanging(value)
                    Me.SendPropertyChanging()
                    Me._Title = value
                    Me.SendPropertyChanged("Title")
                    Me.OnTitleChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)>
        Public Property FirstName As String
            Get
                Return Me._FirstName
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._FirstName, value)) Then
                    Me.OnFirstNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._FirstName = value
                    Me.SendPropertyChanged("FirstName")
                    Me.OnFirstNameChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MiddleName", DbType:="NVarChar(50)")>
        Public Property MiddleName As String
            Get
                Return Me._MiddleName
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._MiddleName, value)) Then
                    Me.OnMiddleNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._MiddleName = value
                    Me.SendPropertyChanged("MiddleName")
                    Me.OnMiddleNameChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)>
        Public Property LastName As String
            Get
                Return Me._LastName
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._LastName, value)) Then
                    Me.OnLastNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._LastName = value
                    Me.SendPropertyChanged("LastName")
                    Me.OnLastNameChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suffix", DbType:="NVarChar(10)")>
        Public Property Suffix As String
            Get
                Return Me._Suffix
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Suffix, value)) Then
                    Me.OnSuffixChanging(value)
                    Me.SendPropertyChanging()
                    Me._Suffix = value
                    Me.SendPropertyChanged("Suffix")
                    Me.OnSuffixChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="NVarChar(50)")>
        Public Property EmailAddress As String
            Get
                Return Me._EmailAddress
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._EmailAddress, value)) Then
                    Me.OnEmailAddressChanging(value)
                    Me.SendPropertyChanging()
                    Me._EmailAddress = value
                    Me.SendPropertyChanged("EmailAddress")
                    Me.OnEmailAddressChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailPromotion", DbType:="Int NOT NULL")>
        Public Property EmailPromotion As Integer
            Get
                Return Me._EmailPromotion
            End Get

            Set(ByVal value As Integer)
                If(Me._EmailPromotion <> value) Then
                    Me.OnEmailPromotionChanging(value)
                    Me.SendPropertyChanging()
                    Me._EmailPromotion = value
                    Me.SendPropertyChanged("EmailPromotion")
                    Me.OnEmailPromotionChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(25)")>
        Public Property Phone As String
            Get
                Return Me._Phone
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Phone, value)) Then
                    Me.OnPhoneChanging(value)
                    Me.SendPropertyChanging()
                    Me._Phone = value
                    Me.SendPropertyChanged("Phone")
                    Me.OnPhoneChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordHash", DbType:="VarChar(40) NOT NULL", CanBeNull:=False)>
        Public Property PasswordHash As String
            Get
                Return Me._PasswordHash
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._PasswordHash, value)) Then
                    Me.OnPasswordHashChanging(value)
                    Me.SendPropertyChanging()
                    Me._PasswordHash = value
                    Me.SendPropertyChanged("PasswordHash")
                    Me.OnPasswordHashChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordSalt", DbType:="VarChar(10) NOT NULL", CanBeNull:=False)>
        Public Property PasswordSalt As String
            Get
                Return Me._PasswordSalt
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._PasswordSalt, value)) Then
                    Me.OnPasswordSaltChanging(value)
                    Me.SendPropertyChanging()
                    Me._PasswordSalt = value
                    Me.SendPropertyChanged("PasswordSalt")
                    Me.OnPasswordSaltChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AdditionalContactInfo", DbType:="Xml", UpdateCheck:=System.Data.Linq.Mapping.UpdateCheck.Never)>
        Public Property AdditionalContactInfo As System.Xml.Linq.XElement
            Get
                Return Me._AdditionalContactInfo
            End Get

            Set(ByVal value As System.Xml.Linq.XElement)
                If(Me._AdditionalContactInfo IsNot value) Then
                    Me.OnAdditionalContactInfoChanging(value)
                    Me.SendPropertyChanging()
                    Me._AdditionalContactInfo = value
                    Me.SendPropertyChanged("AdditionalContactInfo")
                    Me.OnAdditionalContactInfoChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")>
        Public Property rowguid As System.Guid
            Get
                Return Me._rowguid
            End Get

            Set(ByVal value As System.Guid)
                If(Me._rowguid <> value) Then
                    Me.OnrowguidChanging(value)
                    Me.SendPropertyChanging()
                    Me._rowguid = value
                    Me.SendPropertyChanged("rowguid")
                    Me.OnrowguidChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")>
        Public Property ModifiedDate As System.DateTime
            Get
                Return Me._ModifiedDate
            End Get

            Set(ByVal value As System.DateTime)
                If(Me._ModifiedDate <> value) Then
                    Me.OnModifiedDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._ModifiedDate = value
                    Me.SendPropertyChanged("ModifiedDate")
                    Me.OnModifiedDateChanged()
                End If
            End Set
        End Property

        <System.Data.Linq.Mapping.AssociationAttribute(Name:="Contact_Employee", Storage:="_Employees", ThisKey:="ContactID", OtherKey:="ContactID")>
        Public Property Employees As EntitySet(Of LinqServerModeOnAdvWorks.Employee)
            Get
                Return Me._Employees
            End Get

            Set(ByVal value As EntitySet(Of LinqServerModeOnAdvWorks.Employee))
                Me._Employees.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As System.ComponentModel.PropertyChangingEventHandler Implements Global.System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements Global.System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, LinqServerModeOnAdvWorks.Contact.emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As System.[String])
            RaiseEvent PropertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
        End Sub

        Private Sub attach_Employees(ByVal entity As LinqServerModeOnAdvWorks.Employee)
            Me.SendPropertyChanging()
            entity.Contact = Me
        End Sub

        Private Sub detach_Employees(ByVal entity As LinqServerModeOnAdvWorks.Employee)
            Me.SendPropertyChanging()
            entity.Contact = Nothing
        End Sub
    End Class
End Namespace
